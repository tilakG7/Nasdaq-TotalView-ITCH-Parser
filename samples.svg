<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>std::__hash_table&lt;std::__hash_value_type&lt;unsignedlonglong,Parser::Order&gt;&gt;::remove(std::__hash_const_iterator&lt;std::__hash_node&lt;std::__hash_value_type&lt;unsignedlonglong,Parser::Order&gt;,void*&gt;*&gt;) (6,174 samples, 11.82%)</title><rect x="885.3" y="165" width="139.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="888.33" y="175.5" >std::__hash_table..</text>
</g>
<g >
<title>tiny_malloc_should_clear (3,896 samples, 7.46%)</title><rect x="514.4" y="117" width="88.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="517.40" y="127.5" >tiny_mallo..</text>
</g>
<g >
<title>std::__hash_table&lt;std::__hash_value_type&lt;unsignedlonglong,Parser::Order&gt;&gt;::__emplace_unique_key_args&lt;unsignedlonglong,unsignedlonglong&amp;,Parser::Order&gt;(unsignedlonglongconst&amp;,unsignedlonglong&amp;,Parser::Order&amp;&amp;) (1,943 samples, 3.72%)</title><rect x="1139.4" y="165" width="43.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1142.40" y="175.5" >std:..</text>
</g>
<g >
<title>Parser::execute&lt;false&gt;(charconst*) (1,015 samples, 1.94%)</title><rect x="1025.7" y="181" width="22.9" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1028.66" y="191.5" >P..</text>
</g>
<g >
<title>_platform_memset (36 samples, 0.07%)</title><rect x="1038.7" y="149" width="0.8" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1041.66" y="159.5" ></text>
</g>
<g >
<title>tiny_malloc_should_clear (52 samples, 0.10%)</title><rect x="602.4" y="133" width="1.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="605.44" y="143.5" ></text>
</g>
<g >
<title>tiny_free_no_lock (2,497 samples, 4.78%)</title><rect x="828.8" y="149" width="56.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="831.83" y="159.5" >tiny_..</text>
</g>
<g >
<title>tiny_free_no_lock (7 samples, 0.01%)</title><rect x="1138.5" y="149" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1141.50" y="159.5" ></text>
</g>
<g >
<title>_platform_memset (356 samples, 0.68%)</title><rect x="820.8" y="149" width="8.0" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="823.79" y="159.5" ></text>
</g>
<g >
<title>Parser::del(charconst*) (3,254 samples, 6.23%)</title><rect x="1065.1" y="165" width="73.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1068.12" y="175.5" >Parser::..</text>
</g>
<g >
<title>free (36 samples, 0.07%)</title><rect x="1036.3" y="165" width="0.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1039.29" y="175.5" ></text>
</g>
<g >
<title>DYLD-STUB$$operatornew(unsignedlong) (12 samples, 0.02%)</title><rect x="1175.4" y="149" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1178.38" y="159.5" ></text>
</g>
<g >
<title>operatornew(unsignedlong) (40 samples, 0.08%)</title><rect x="290.3" y="165" width="0.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="293.29" y="175.5" ></text>
</g>
<g >
<title>_platform_memset (74 samples, 0.14%)</title><rect x="1107.1" y="133" width="1.7" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1110.09" y="143.5" ></text>
</g>
<g >
<title>malloc (7 samples, 0.01%)</title><rect x="1177.5" y="133" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1180.50" y="143.5" ></text>
</g>
<g >
<title>start (52,216 samples, 100.00%)</title><rect x="10.0" y="213" width="1180.0" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >start</text>
</g>
<g >
<title>Parser::add(charconst*) (79 samples, 0.15%)</title><rect x="10.0" y="197" width="1.8" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>_tiny_check_and_zero_inline_meta_from_freelist (23 samples, 0.04%)</title><rect x="555.7" y="101" width="0.5" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="558.66" y="111.5" ></text>
</g>
<g >
<title>_tiny_check_and_zero_inline_meta_from_freelist (112 samples, 0.21%)</title><rect x="581.4" y="85" width="2.5" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="584.40" y="95.5" ></text>
</g>
<g >
<title>_swrite (7 samples, 0.01%)</title><rect x="1035.9" y="69" width="0.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1038.86" y="79.5" ></text>
</g>
<g >
<title>Parser::add(charconst*) (23,045 samples, 44.13%)</title><rect x="85.8" y="181" width="520.8" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="88.77" y="191.5" >Parser::add(charconst*)</text>
</g>
<g >
<title>free (280 samples, 0.54%)</title><rect x="750.7" y="165" width="6.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="753.73" y="175.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char&gt;::sync() (8 samples, 0.02%)</title><rect x="720.1" y="133" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="723.09" y="143.5" ></text>
</g>
<g >
<title>_swrite (7 samples, 0.01%)</title><rect x="1084.3" y="69" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1087.33" y="79.5" ></text>
</g>
<g >
<title>rack_get_thread_index (22 samples, 0.04%)</title><rect x="1181.8" y="101" width="0.5" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1184.84" y="111.5" ></text>
</g>
<g >
<title>Parser::processVwap() (10 samples, 0.02%)</title><rect x="1035.8" y="149" width="0.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1038.81" y="159.5" ></text>
</g>
<g >
<title>__sflush (8 samples, 0.02%)</title><rect x="720.1" y="101" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="723.09" y="111.5" ></text>
</g>
<g >
<title>DYLD-STUB$$free (7 samples, 0.01%)</title><rect x="1084.0" y="149" width="0.2" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1087.01" y="159.5" ></text>
</g>
<g >
<title>tiny_malloc_from_free_list (325 samples, 0.62%)</title><rect x="507.1" y="117" width="7.3" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="510.05" y="127.5" ></text>
</g>
<g >
<title>DYLD-STUB$$operatornew(unsignedlong) (49 samples, 0.09%)</title><rect x="491.8" y="149" width="1.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="494.75" y="159.5" ></text>
</g>
<g >
<title>DYLD-STUB$$_platform_memset (7 samples, 0.01%)</title><rect x="1106.9" y="133" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1109.93" y="143.5" ></text>
</g>
<g >
<title>DYLD-STUB$$malloc (80 samples, 0.15%)</title><rect x="494.4" y="133" width="1.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="497.44" y="143.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char&gt;::sync() (8 samples, 0.02%)</title><rect x="1084.3" y="117" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1087.31" y="127.5" ></text>
</g>
<g >
<title>tiny_free_list_add_ptr (832 samples, 1.59%)</title><rect x="866.3" y="133" width="18.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="869.30" y="143.5" ></text>
</g>
<g >
<title>rack_get_thread_index (318 samples, 0.61%)</title><rect x="556.2" y="101" width="7.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="559.18" y="111.5" ></text>
</g>
<g >
<title>DYLD-STUB$$operatordelete(void*) (5 samples, 0.01%)</title><rect x="1084.2" y="149" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1087.17" y="159.5" ></text>
</g>
<g >
<title>__write_nocancel (8 samples, 0.02%)</title><rect x="720.1" y="53" width="0.2" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="723.09" y="63.5" ></text>
</g>
<g >
<title>DYLD-STUB$$operatordelete(void*) (30 samples, 0.06%)</title><rect x="719.4" y="165" width="0.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="722.41" y="175.5" ></text>
</g>
<g >
<title>Parser::cancel(charconst*) (139 samples, 0.27%)</title><rect x="606.6" y="181" width="3.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="609.55" y="191.5" ></text>
</g>
<g >
<title>Parser::processVwap() (29 samples, 0.06%)</title><rect x="289.6" y="165" width="0.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="292.63" y="175.5" ></text>
</g>
<g >
<title>_tiny_check_and_zero_inline_meta_from_freelist (6 samples, 0.01%)</title><rect x="1181.7" y="101" width="0.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1184.71" y="111.5" ></text>
</g>
<g >
<title>__swrite (7 samples, 0.01%)</title><rect x="1084.3" y="53" width="0.2" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="1087.33" y="63.5" ></text>
</g>
<g >
<title>operatornew(unsignedlong) (4,901 samples, 9.39%)</title><rect x="492.9" y="149" width="110.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="495.86" y="159.5" >operatornew(u..</text>
</g>
<g >
<title>Parser::del(charconst*) (18,407 samples, 35.25%)</title><rect x="609.7" y="181" width="416.0" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="612.69" y="191.5" >Parser::del(charconst*)</text>
</g>
<g >
<title>szone_malloc_should_clear (28 samples, 0.05%)</title><rect x="605.9" y="149" width="0.7" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="608.92" y="159.5" ></text>
</g>
<g >
<title>operatornew(unsignedlong) (334 samples, 0.64%)</title><rect x="1175.6" y="149" width="7.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1178.65" y="159.5" ></text>
</g>
<g >
<title>DYLD-STUB$$malloc (9 samples, 0.02%)</title><rect x="1176.0" y="133" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1178.97" y="143.5" ></text>
</g>
<g >
<title>Parser::replace(charconst*) (5,942 samples, 11.38%)</title><rect x="1049.0" y="181" width="134.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1052.03" y="191.5" >Parser::replace(..</text>
</g>
<g >
<title>szone_malloc_should_clear (4,474 samples, 8.57%)</title><rect x="501.3" y="133" width="101.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="504.34" y="143.5" >szone_malloc..</text>
</g>
<g >
<title>_szone_free (17 samples, 0.03%)</title><rect x="1138.7" y="165" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1141.66" y="175.5" ></text>
</g>
<g >
<title>fflush (21 samples, 0.04%)</title><rect x="289.8" y="117" width="0.5" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="292.79" y="127.5" ></text>
</g>
<g >
<title>std::__hash_table&lt;std::__hash_value_type&lt;unsignedlonglong,Parser::Order&gt;&gt;::remove(std::__hash_const_iterator&lt;std::__hash_node&lt;std::__hash_value_type&lt;unsignedlonglong,Parser::Order&gt;,void*&gt;*&gt;) (981 samples, 1.88%)</title><rect x="1116.3" y="149" width="22.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1119.31" y="159.5" >s..</text>
</g>
<g >
<title>fflush (7 samples, 0.01%)</title><rect x="1035.9" y="101" width="0.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1038.86" y="111.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char&gt;::flush() (22 samples, 0.04%)</title><rect x="289.8" y="149" width="0.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="292.79" y="159.5" ></text>
</g>
<g >
<title>free (65 samples, 0.12%)</title><rect x="1089.5" y="149" width="1.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1092.48" y="159.5" ></text>
</g>
<g >
<title>tiny_malloc_should_clear (5 samples, 0.01%)</title><rect x="1183.1" y="133" width="0.1" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1186.08" y="143.5" ></text>
</g>
<g >
<title>tiny_malloc_from_free_list (33 samples, 0.06%)</title><rect x="1182.3" y="101" width="0.8" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1185.34" y="111.5" ></text>
</g>
<g >
<title>__swrite (21 samples, 0.04%)</title><rect x="289.8" y="69" width="0.5" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="292.79" y="79.5" ></text>
</g>
<g >
<title>tiny_free_list_add_ptr (21 samples, 0.04%)</title><rect x="602.0" y="85" width="0.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="604.97" y="95.5" ></text>
</g>
<g >
<title>tiny_free_list_remove_ptr (6 samples, 0.01%)</title><rect x="885.1" y="133" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="888.10" y="143.5" ></text>
</g>
<g >
<title>__sflush (7 samples, 0.01%)</title><rect x="1084.3" y="85" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1087.33" y="95.5" ></text>
</g>
<g >
<title>_swrite (8 samples, 0.02%)</title><rect x="720.1" y="85" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="723.09" y="95.5" ></text>
</g>
<g >
<title>operatornew(unsignedlong) (6 samples, 0.01%)</title><rect x="1139.3" y="165" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1142.27" y="175.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char&gt;::flush() (8 samples, 0.02%)</title><rect x="1084.3" y="133" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1087.31" y="143.5" ></text>
</g>
<g >
<title>__write_nocancel (21 samples, 0.04%)</title><rect x="289.8" y="53" width="0.5" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="292.79" y="63.5" ></text>
</g>
<g >
<title>free_tiny (5 samples, 0.01%)</title><rect x="1048.9" y="165" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1051.85" y="175.5" ></text>
</g>
<g >
<title>get_tiny_previous_free_msize (50 samples, 0.10%)</title><rect x="1040.5" y="133" width="1.1" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="1043.51" y="143.5" ></text>
</g>
<g >
<title>tiny_malloc_should_clear (172 samples, 0.33%)</title><rect x="1179.2" y="117" width="3.9" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1182.20" y="127.5" ></text>
</g>
<g >
<title>_szone_free (221 samples, 0.42%)</title><rect x="1084.5" y="149" width="5.0" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1087.49" y="159.5" ></text>
</g>
<g >
<title>malloc (21 samples, 0.04%)</title><rect x="500.9" y="133" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="503.86" y="143.5" ></text>
</g>
<g >
<title>_swrite (21 samples, 0.04%)</title><rect x="289.8" y="85" width="0.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="292.79" y="95.5" ></text>
</g>
<g >
<title>get_tiny_previous_free_msize (410 samples, 0.79%)</title><rect x="857.0" y="133" width="9.3" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="860.01" y="143.5" ></text>
</g>
<g >
<title>std::__hash_table&lt;std::__hash_value_type&lt;unsignedlonglong,Parser::Order&gt;&gt;::__do_rehash&lt;true&gt;(unsignedlong) (102 samples, 0.20%)</title><rect x="603.6" y="149" width="2.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="606.62" y="159.5" ></text>
</g>
<g >
<title>free_tiny (5,673 samples, 10.86%)</title><rect x="757.1" y="165" width="128.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="760.06" y="175.5" >free_tiny</text>
</g>
<g >
<title>_malloc_zone_malloc (59 samples, 0.11%)</title><rect x="1176.2" y="133" width="1.3" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1179.17" y="143.5" ></text>
</g>
<g >
<title>free_tiny (45 samples, 0.09%)</title><rect x="1185.2" y="181" width="1.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1188.21" y="191.5" ></text>
</g>
<g >
<title>tiny_free_no_lock (36 samples, 0.07%)</title><rect x="1024.9" y="165" width="0.8" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1027.85" y="175.5" ></text>
</g>
<g >
<title>std::__hash_table&lt;std::__hash_value_type&lt;unsignedlonglong,Parser::Order&gt;&gt;::__emplace_unique_key_args&lt;unsignedlonglong,unsignedlonglong&amp;,Parser::Order&gt;(unsignedlonglongconst&amp;,unsignedlonglong&amp;,Parser::Order&amp;&amp;) (167 samples, 0.32%)</title><rect x="1186.2" y="181" width="3.8" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1189.23" y="191.5" ></text>
</g>
<g >
<title>__write_nocancel (7 samples, 0.01%)</title><rect x="1035.9" y="37" width="0.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1038.86" y="47.5" ></text>
</g>
<g >
<title>DYLD-STUB$$free (33 samples, 0.06%)</title><rect x="718.7" y="165" width="0.7" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="721.66" y="175.5" ></text>
</g>
<g >
<title>set_tiny_meta_header_in_use (798 samples, 1.53%)</title><rect x="583.9" y="85" width="18.1" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="586.93" y="95.5" ></text>
</g>
<g >
<title>main (52,049 samples, 99.68%)</title><rect x="13.8" y="197" width="1176.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="16.77" y="207.5" >main</text>
</g>
<g >
<title>_szone_free (1,348 samples, 2.58%)</title><rect x="720.3" y="165" width="30.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="723.27" y="175.5" >_s..</text>
</g>
<g >
<title>__swrite (8 samples, 0.02%)</title><rect x="720.1" y="69" width="0.2" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="723.09" y="79.5" ></text>
</g>
<g >
<title>free_tiny (10 samples, 0.02%)</title><rect x="1139.0" y="165" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1142.04" y="175.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char&gt;::flush() (8 samples, 0.02%)</title><rect x="720.1" y="149" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="723.09" y="159.5" ></text>
</g>
<g >
<title>tiny_free_list_add_ptr (39 samples, 0.07%)</title><rect x="1041.6" y="133" width="0.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1044.64" y="143.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char&gt;::sync() (22 samples, 0.04%)</title><rect x="289.8" y="133" width="0.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="292.79" y="143.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char&gt;::sync() (8 samples, 0.02%)</title><rect x="1035.9" y="117" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1038.86" y="127.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (5 samples, 0.01%)</title><rect x="1183.2" y="149" width="0.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1186.20" y="159.5" ></text>
</g>
<g >
<title>std::__hash_table&lt;std::__hash_value_type&lt;unsignedlonglong,Parser::Order&gt;&gt;::__emplace_unique_key_args&lt;unsignedlonglong,unsignedlonglong&amp;,Parser::Order&gt;(unsignedlonglongconst&amp;,unsignedlonglong&amp;,Parser::Order&amp;&amp;) (13,955 samples, 26.73%)</title><rect x="291.2" y="165" width="315.4" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="294.19" y="175.5" >std::__hash_table&lt;std::__hash_value_type&lt;u..</text>
</g>
<g >
<title>Parser::processVwap() (8 samples, 0.02%)</title><rect x="720.1" y="165" width="0.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="723.09" y="175.5" ></text>
</g>
<g >
<title>_malloc_zone_malloc (204 samples, 0.39%)</title><rect x="496.3" y="133" width="4.6" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="499.25" y="143.5" ></text>
</g>
<g >
<title>__swrite (7 samples, 0.01%)</title><rect x="1035.9" y="53" width="0.1" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="1038.86" y="63.5" ></text>
</g>
<g >
<title>Parser::del(charconst*) (83 samples, 0.16%)</title><rect x="11.8" y="197" width="1.9" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="14.83" y="207.5" ></text>
</g>
<g >
<title>_szone_free (80 samples, 0.15%)</title><rect x="1183.4" y="181" width="1.8" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1186.40" y="191.5" ></text>
</g>
<g >
<title>__sflush (21 samples, 0.04%)</title><rect x="289.8" y="101" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="292.79" y="111.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char&gt;::flush() (8 samples, 0.02%)</title><rect x="1035.9" y="133" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1038.86" y="143.5" ></text>
</g>
<g >
<title>tiny_free_no_lock (136 samples, 0.26%)</title><rect x="1039.5" y="149" width="3.0" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1042.47" y="159.5" ></text>
</g>
<g >
<title>set_tiny_meta_header_in_use (16 samples, 0.03%)</title><rect x="1182.7" y="85" width="0.4" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="1185.70" y="95.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (238 samples, 0.46%)</title><rect x="1177.7" y="133" width="5.4" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1180.71" y="143.5" ></text>
</g>
<g >
<title>DYLD-STUB$$_platform_memset (36 samples, 0.07%)</title><rect x="820.0" y="149" width="0.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="822.97" y="159.5" ></text>
</g>
<g >
<title>std::__hash_table&lt;std::__hash_value_type&lt;unsignedlonglong,Parser::Order&gt;&gt;::remove(std::__hash_const_iterator&lt;std::__hash_node&lt;std::__hash_value_type&lt;unsignedlonglong,Parser::Order&gt;,void*&gt;*&gt;) (266 samples, 0.51%)</title><rect x="1042.6" y="165" width="6.0" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1045.57" y="175.5" ></text>
</g>
<g >
<title>tiny_free_no_lock (334 samples, 0.64%)</title><rect x="1108.8" y="133" width="7.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1111.76" y="143.5" ></text>
</g>
<g >
<title>tiny_free_list_add_ptr (115 samples, 0.22%)</title><rect x="1113.7" y="117" width="2.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1116.66" y="127.5" ></text>
</g>
<g >
<title>fflush (7 samples, 0.01%)</title><rect x="1084.3" y="101" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1087.33" y="111.5" ></text>
</g>
<g >
<title>Parser::processVwap() (9 samples, 0.02%)</title><rect x="1084.3" y="149" width="0.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1087.28" y="159.5" ></text>
</g>
<g >
<title>Parser::execute&lt;true&gt;(charconst*) (19 samples, 0.04%)</title><rect x="1048.6" y="181" width="0.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1051.60" y="191.5" ></text>
</g>
<g >
<title>free_tiny (241 samples, 0.46%)</title><rect x="1037.1" y="165" width="5.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1040.10" y="175.5" ></text>
</g>
<g >
<title>_szone_free (11 samples, 0.02%)</title><rect x="1036.0" y="165" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1039.04" y="175.5" ></text>
</g>
<g >
<title>free_tiny (1,122 samples, 2.15%)</title><rect x="1091.0" y="149" width="25.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1093.95" y="159.5" >f..</text>
</g>
<g >
<title>Parser::getOrderId(charconst*) (83 samples, 0.16%)</title><rect x="1031.0" y="165" width="1.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1034.02" y="175.5" ></text>
</g>
<g >
<title>get_tiny_previous_free_msize (63 samples, 0.12%)</title><rect x="1112.2" y="117" width="1.4" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="1115.22" y="127.5" ></text>
</g>
<g >
<title>tiny_malloc_from_free_list (1,727 samples, 3.31%)</title><rect x="563.4" y="101" width="39.0" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="566.41" y="111.5" >tin..</text>
</g>
<g >
<title>__write_nocancel (7 samples, 0.01%)</title><rect x="1084.3" y="37" width="0.2" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1087.33" y="47.5" ></text>
</g>
<g >
<title>all (52,216 samples, 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>fflush (8 samples, 0.02%)</title><rect x="720.1" y="117" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="723.09" y="127.5" ></text>
</g>
<g >
<title>Parser::updateTime(charconst*) (136 samples, 0.26%)</title><rect x="1033.0" y="165" width="3.0" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1035.96" y="175.5" ></text>
</g>
<g >
<title>DYLD-STUB$$_platform_memset (5 samples, 0.01%)</title><rect x="1038.5" y="149" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1041.55" y="159.5" ></text>
</g>
<g >
<title>__sflush (7 samples, 0.01%)</title><rect x="1035.9" y="85" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1038.86" y="95.5" ></text>
</g>
<g >
<title>Thread_9137153DispatchQueue_1:com.apple.main-thread (52,216 samples, 100.00%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >Thread_9137153DispatchQueue_1:com.apple.main-thread</text>
</g>
</g>
</svg>
